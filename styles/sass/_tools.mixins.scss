/* ------------------------------------------
   tools.MIXINS
------------------------------------------ */

@mixin clearfix() {
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin un-clearfix() {
  &:before, &:after {
    content: none;
    display: auto;
  }
  &:after {
    clear: none;
  }
}

// Image Replacement

@mixin ir() {
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
  // background: url(test.png);
  // width: 300px;
  // height: 75px;
}

// Hide only visually, but have it available for screen readers:
// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility

@mixin visuallyhidden() {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}


//  ## Media query and orietation mixins
//  ==================================================
//  http://alwaystwisted.com/post.php?s=2013-04-01-my-media-query-mixin


@mixin mq($point, $query1: min, $query2: width) {
  @media screen and (#{$query1}-#{$query2}: strip-unit($point) / 16 +em) {
    @content;
  }
}

@mixin orient($orientation: landscape) {
  @media (orientation : $orientation) {
    @content;
  }
}

///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback),
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}
